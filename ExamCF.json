{
    "AWSTemplateFormatVersion": "2010-09-09",
  
    "Description": "Cloudformation template with 7 instances for the OpenShift 4.2 cluster",
  
  
    "Mappings": {
  
      "SubnetConfig": {
        "VPC": {
          "CIDR": "10.0.0.0/16"
        },
        "Public1": {
          "CIDR": "10.0.2.0/24"
        }
      }
    },
  
    "Resources": {
  
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
  
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "CidrBlock": {
            "Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]
          },
          "Tags": [{
              "Key": "Name",
              "Value": "LinuxAcademy"
            },
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Network",
              "Value": "VPC"
            }
          ]
        }
      },
  
  
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "AvailabilityZone": {
            "Fn::Select": ["0", {
              "Fn::GetAZs": ""
            }]
          },
          "CidrBlock": {
            "Fn::FindInMap": ["SubnetConfig", "Public1", "CIDR"]
          },
          "Tags": [{
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Network",
              "Value": "Public1"
            }
          ]
        }
      },
  
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [{
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Network",
              "Value": "Public"
            }
          ]
        }
      },
  
      "GatewayToInternet": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
  
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [{
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Network",
              "Value": "Public"
            }
          ]
        }
      },
  
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "GatewayToInternet",
        "Properties": {
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
  
      "PublicSubnetRouteTableAssociation1": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PublicSubnet1"
          },
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          }
        }
      },
  
      "PublicNetworkAcl": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [{
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Network",
              "Value": "Public"
            }
          ]
        }
      },
  
      "InboundHTTPPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "100",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "false",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "80",
            "To": "80"
          }
        }
      },
  
      "InboundHTTPSPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "101",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "false",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "443",
            "To": "443"
          }
        }
      },
  
      "InboundSSHPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "102",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "false",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "22",
            "To": "22"
          }
        }
      },
  
      "InboundKubernetesAPIPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "103",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "false",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "6443",
            "To": "6443"
          }
        }
      },
  
      "InboundMachineConfigPublicNetworkAclEntry": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "104",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
              "From": "22623",
              "To": "22623"
            }
          }
        },
  
      "OutboundPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "100",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "true",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "0",
            "To": "65535"
          }
        }
      },
  
      "PublicSubnetNetworkAclAssociation1": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PublicSubnet1"
          },
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          }
        }
      },
  
      "EC2SecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Enable access to the EC2 host",
          "VpcId": {
            "Ref": "VPC"
          },
          "SecurityGroupIngress": [{
              "IpProtocol": "tcp",
              "FromPort": "0",
              "ToPort": "65535",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "udp",
              "FromPort": "0",
              "ToPort": "65535",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "icmp",
              "FromPort": "-1",
              "ToPort": "-1",
              "CidrIp": "0.0.0.0/0"
            }
          ]
        }
      },
      "SGBaseIngress": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EC2SecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {
            "Ref": "EC2SecurityGroup"
          }
        }
      },
  
      "PublicInstance1": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t3a.medium",
          "ImageId": "%ami-164%",
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash\n",
                "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                "echo 'root:%password%' | chpasswd\n",
                "echo '10.0.2.203      bastion  ip-10-0-2-203.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.204      bootstrap  ip-10-0-2-204.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.205      master0  ip-10-0-2-205.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.206      master1  ip-10-0-2-206.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.207      master2  ip-10-0-2-207.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.208      node0  ip-10-0-2-208.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.209      node1  ip-10-0-2-209.ec2.internal' >> /etc/hosts\n"
              ]]
            }
          },
          "NetworkInterfaces": [{
            "GroupSet": [{
              "Ref": "EC2SecurityGroup"
            }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddress": "10.0.2.203"
          }]
        }
      },
      "PublicInstance2": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t3a.large",
          "ImageId": "%ami-200%",
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash\n",
                "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                "echo 'root:%password%' | chpasswd\n",
                "echo '10.0.2.203      bastion  ip-10-0-2-203.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.204      bootstrap  ip-10-0-2-204.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.205      master0  ip-10-0-2-205.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.206      master1  ip-10-0-2-206.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.207      master2  ip-10-0-2-207.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.208      node0  ip-10-0-2-208.ec2.internal' >> /etc/hosts\n",
                "echo '10.0.2.209      node1  ip-10-0-2-209.ec2.internal' >> /etc/hosts\n"
              ]]
            }
          },
          "NetworkInterfaces": [{
            "GroupSet": [{
              "Ref": "EC2SecurityGroup"
            }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddress": "10.0.2.204"
          }]
        }
      },
      "PublicInstance3": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t3a.large",
          "ImageId": "%ami-200%",
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash\n",
                "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                "echo 'root:%password%' | chpasswd\n"
              ]]
            }
          },
          "NetworkInterfaces": [{
            "GroupSet": [{
              "Ref": "EC2SecurityGroup"
            }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddress": "10.0.2.205"
          }]
        }
      },
      "PublicInstance4": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t3a.large",
          "ImageId": "%ami-200%",
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash\n",
                "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                "echo 'root:%password%' | chpasswd\n"
              ]]
            }
          },
          "NetworkInterfaces": [{
            "GroupSet": [{
              "Ref": "EC2SecurityGroup"
            }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddress": "10.0.2.206"
          }]
        }
      },
      "PublicInstance5": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t3a.large",
          "ImageId": "%ami-200%",
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash\n",
                "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                "echo 'root:%password%' | chpasswd\n"
              ]]
            }
          },
          "NetworkInterfaces": [{
            "GroupSet": [{
              "Ref": "EC2SecurityGroup"
            }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "PrivateIpAddress": "10.0.2.207"
          }]
        }
      },
      "PublicInstance6": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
          "InstanceType": "t3a.large",
          "ImageId": "%ami-200%",
          "UserData": {
              "Fn::Base64": {
              "Fn::Join": ["", [
                  "#!/bin/bash\n",
                  "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                  "echo 'root:%password%' | chpasswd\n"
              ]]
              }
          },
          "NetworkInterfaces": [{
              "GroupSet": [{
              "Ref": "EC2SecurityGroup"
              }],
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "DeleteOnTermination": "true",
              "SubnetId": {
              "Ref": "PublicSubnet1"
              },
              "PrivateIpAddress": "10.0.2.208"
          }]
          }
      },
      "PublicInstance7": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
          "InstanceType": "t3a.large",
          "ImageId": "%ami-200%",
          "UserData": {
              "Fn::Base64": {
              "Fn::Join": ["", [
                  "#!/bin/bash\n",
                  "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                  "echo 'root:%password%' | chpasswd\n"
              ]]
              }
          },
          "NetworkInterfaces": [{
              "GroupSet": [{
              "Ref": "EC2SecurityGroup"
              }],
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "DeleteOnTermination": "true",
              "SubnetId": {
              "Ref": "PublicSubnet1"
              },
              "PrivateIpAddress": "10.0.2.209"
          }]
          }
        }  
      },
      "Outputs": {
          "pubIpAddress1": {
          "Description": "Public ip address of bastion",
          "Value": {
              "Fn::GetAtt": ["PublicInstance1", "PublicIp"]
          }
          },
          "privIpAddress1": {
          "Description": "Private ip address of bastion",
          "Value": {
              "Fn::GetAtt": ["PublicInstance1", "PrivateIp"]
          }
          },
          "pubIpAddress2": {
          "Description": "Public ip address of bootstrap",
          "Value": {
              "Fn::GetAtt": ["PublicInstance2", "PublicIp"]
          }
          },
          "privIpAddress2": {
          "Description": "Private ip address of bootstrap",
          "Value": {
              "Fn::GetAtt": ["PublicInstance2", "PrivateIp"]
          }
          },
          "pubIpAddress3": {
          "Description": "Public ip address of master0",
          "Value": {
              "Fn::GetAtt": ["PublicInstance3", "PublicIp"]
          }
          },
          "privIpAddress3": {
          "Description": "Private ip address of master0",
          "Value": {
              "Fn::GetAtt": ["PublicInstance3", "PrivateIp"]
          }
          },
          "pubIpAddress4": {
          "Description": "Public ip address of master1",
          "Value": {
              "Fn::GetAtt": ["PublicInstance4", "PublicIp"]
          }
          },
          "privIpAddress4": {
          "Description": "Private ip address of master1",
          "Value": {
              "Fn::GetAtt": ["PublicInstance4", "PrivateIp"]
          }
          },
          "pubIpAddress5": {
          "Description": "Public ip address of master2",
          "Value": {
              "Fn::GetAtt": ["PublicInstance5", "PublicIp"]
              }
          },
          "privIpAddress5": {
          "Description": "Private ip address of master2",
          "Value": {
              "Fn::GetAtt": ["PublicInstance5", "PrivateIp"]
              }
          },
          "pubIpAddress6": {
          "Description": "Public ip address of node0",
          "Value": {
              "Fn::GetAtt": ["PublicInstance6", "PublicIp"]
              }
          },
          "privIpAddress6": {
          "Description": "Private ip address of node0",
          "Value": {
              "Fn::GetAtt": ["PublicInstance6", "PrivateIp"]
              }
          },
          "pubIpAddress7": {
          "Description": "Public ip address of node1",
          "Value": {
              "Fn::GetAtt": ["PublicInstance7", "PublicIp"]
              }
          },
          "privIpAddress7": {
          "Description": "Private ip address of node1",
          "Value": {
              "Fn::GetAtt": ["PublicInstance7", "PrivateIp"]
              }
          }
      }
  }